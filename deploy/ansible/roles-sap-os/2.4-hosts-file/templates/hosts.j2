{# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#}
{#
FIXES APPLIED:
1. Added safety checks for undefined variables (virtual_host, scs_high_availability, database_*)
2. Fixed logic error in database scale-out section (swapped hana/storage suffixes)
3. Added proper null checks before appending to virtual_host_names
4. Improved efficiency by removing unnecessary length checks
5. Added default values using Jinja2 default filter
6. Fixed variable name from 'ipaddr' to 'ipadd' for consistency
7. Added validation for empty CIDR strings to prevent ansible.utils.network_in_usable errors
8. Added safety check for IP address array existence

Outline:
  1) Loop over all the hosts in the playbook
  2) For each host, loop over all the network interfaces except 'lo' (localhost)
  3) Check for ipv4 configuration the interface
  4) If the interface is eth0
       True : This is the primary NIC and IP for the host
       False: This is a Secondary NIC with primary IP for this NIC
  5) If the NIC has secondary IP adresses assigned loop over them and
     insert comment for unhandled configuration

Examples:
  hosts file (should look similar to this):
      # X01
      10.1.2.42          x01app00l2e7.sap.contoso.com                      x01app00l2e7
      10.1.2.43          x01app01l2e7.sap.contoso.com                      x01app01l2e7
      10.1.2.5           x01dhdb00l02e7.sap.contoso.com                    x01dhdb00l02e7
      10.1.2.68          x01dhdb00l02e7eth1_0.sap.contoso.com              x01dhdb00l02e7eth1_0
      10.1.2.38          x01scs00l2e7.sap.contoso.com                      x01scs00l2e7
      10.1.2.26          x01web00l2e7.sap.contoso.com                      x01web00l2e7

  play_hosts (flat list of host names to loop over):
      x01app00l2e7
      x01app01l2e7
      x01dhdb00l02e7
      x01scs00l2e7
      x01web00l2e7

  ansible_interfaces (a sorted list could look like this):
      eth0
      eth1
      eth2
      eth3
      lo                       <-- we want to omit this entry

  interface (On a grand run this is what all the servers and their associated NICs might look like):
      x01app00l2e7
          eth0
          eth1
      x01app01l2e7
          eth0
          eth1
      x01dhdb00l02e7
          eth0
          eth1
          eth2
          eth3
      x01scs00l2e7
          eth0
      x01web00l2e7
          eth0

Notes:
    1) any blank lines, that are not in the comment sections, will be reflected
       in the hosts file.

0.........1.........2.........3.........4.........5.........6.........7.........8



#}

{% set db_scale_out = database_scale_out | default(false) %}
{% set db_ha = database_high_availability | default(false) %}
{% set subnet_db_valid = subnet_cidr_db is defined  and (subnet_cidr_db | string | length > 0) %}
{% set subnet_storage_valid = subnet_cidr_storage is defined and (subnet_cidr_storage | string | length > 0) %}


# {{ sap_sid|upper }}
# {{ ansible_play_hosts|length }} Hosts
# Scale out: {{ db_scale_out }}
# High availability: {{ db_ha }}
# Subnet DB valid: {{ subnet_db_valid }}
# Subnet Storage valid: {{ subnet_storage_valid }}

{#

Loop through all the hosts that are referenced by the Playbook.
If we do not sort it, then the order can change randomly.
This is not a problem, but it makes it harder to compare the output
Use azure instance metadata to get the IP addresses for the current host.
This standardizes the values across all hosts and is not dependent on the
ansible_facts.

#}



{# This template generates host entries based on the provided data #}
{% for host in ansible_play_hosts|sort %}
{# Set variables for the current host #}
{%   set supported_tiers = hostvars[host]['supported_tiers'] if 'supported_tiers' in hostvars[host] else [] %}
{%   set virtual_host_names = [] %}
{%   set default_virtual_host = hostvars[host]['virtual_host'] if 'virtual_host' in hostvars[host] else none %}
{%   set scs_ha_enabled = scs_high_availability | default(false) %}
{# Assign virtual host names based on supported tiers #}
{%   for tier in supported_tiers %}
{%     if tier == 'scs' %}
{%       set scs_virtual_host = hostvars[host]['custom_scs_virtual_hostname'] if 'custom_scs_virtual_hostname' in hostvars[host] else default_virtual_host %}
{%       if scs_virtual_host not in virtual_host_names and not scs_ha_enabled %}
{%         set _ = virtual_host_names.append(scs_virtual_host) %}
{%       endif %}
{%     elif tier == 'ers' %}
{%       set ers_virtual_host = hostvars[host]['custom_ers_virtual_hostname'] if 'custom_ers_virtual_hostname' in hostvars[host] else default_virtual_host %}
{%       if ers_virtual_host not in virtual_host_names and not scs_ha_enabled %}
{%         set _ = virtual_host_names.append(ers_virtual_host) %}
{%       endif %}
{%     elif tier == 'pas' %}
{%       set pas_virtual_host = hostvars[host]['custom_pas_virtual_hostname'] if 'custom_pas_virtual_hostname' in hostvars[host] else default_virtual_host %}
{%       if pas_virtual_host not in virtual_host_names %}
{%         set _ = virtual_host_names.append(pas_virtual_host) %}
{%       endif %}
{%     elif tier == 'app' %}
{%       set app_virtual_host = hostvars[host]['custom_app_virtual_hostname'] if 'custom_app_virtual_hostname' in hostvars[host] else default_virtual_host %}
{%       if app_virtual_host not in virtual_host_names %}
{%         set _ = virtual_host_names.append(app_virtual_host) %}
{%       endif %}
{%     elif tier == 'web' %}
{%       set web_virtual_host = hostvars[host]['custom_web_virtual_hostname'] if 'custom_web_virtual_hostname' in hostvars[host] else default_virtual_host %}
{%       if  web_virtual_host not in virtual_host_names %}
{%         set _ = virtual_host_names.append(web_virtual_host) %}
{%       endif %}
{%     elif tier in ['hana', 'oracle', 'oracle-asm', 'db2', 'sybase'] %}
{%       set db_virtual_host = hostvars[host]['custom_db_virtual_hostname'] if 'custom_db_virtual_hostname' in hostvars[host] else default_virtual_host %}
{%       if db_virtual_host not in virtual_host_names %}
{%         set _ = virtual_host_names.append(db_virtual_host) %}
{%       endif %}
{%     endif %}
{%   endfor %}
{# Keep only unique values in the virtual_host_names #}
{% set virtual_host_names = virtual_host_names | unique %}
{# Determine the IPs for the current host from ipadd variable. Do not sort it, the order is already correct. #}
{%   set host_ips = hostvars[host]['ipadd'] if 'ipadd' in hostvars[host] else [] %}
{# Check if there are IPs available for the current host #}
{%   if host_ips and host_ips | length > 0 %}

{{ '%-19s' | format(host_ips[0]) }}{{ '%-80s ' | format(host + '.' + sap_fqdn) }}{{ '%-21s' | format(host) }}
{%     for vh_name in virtual_host_names %}
{{ '%-19s' | format(host_ips[0]) }}{{ '%-80s ' | format(vh_name + '.' + sap_fqdn) }}{{ '%-21s' | format(vh_name) }}
{%     endfor %}
{# Loop through remaining IPs for the virtual host #}
{%     for ip in host_ips[1:] %}
{%       if db_scale_out %}
{%          if db_ha %}
{%            if (subnet_db_valid and (subnet_cidr_db | ansible.utils.network_in_usable(ip))) %}
{{ '%-19s' | format(ip) }}{{ '%-80s ' | format(host + '-hsr.' + sap_fqdn) }}{{ '%-21s' | format(host + '-hsr') }}
{%            elif (subnet_storage_valid and (subnet_cidr_storage | ansible.utils.network_in_usable(ip))) %}
{{ '%-19s' | format(ip) }}{{ '%-80s ' | format(host + '-inter.' + sap_fqdn) }}{{ '%-21s' | format(host + '-inter') }}
{%            endif %}
{%          else %}
{%            if (subnet_db_valid and (subnet_cidr_db | ansible.utils.network_in_usable(ip))) %}
{{ '%-19s' | format(ip) }}{{ '%-80s ' | format(host + '-hana.' + sap_fqdn) }}{{ '%-21s' | format(host + '-hana') }}
{%            elif (subnet_storage_valid and (subnet_cidr_storage | ansible.utils.network_in_usable(ip))) %}
{{ '%-19s' | format(ip) }}{{ '%-80s ' | format(host + '-storage.' + sap_fqdn) }}{{ '%-21s' | format(host + '-storage') }}
{%            endif %}
{%          endif %}
{%       else %}
{%         for vh_name in virtual_host_names %}
{{ '%-19s' | format(ip) }}{{ '%-80s ' | format(vh_name + '.' + sap_fqdn) }}{{ '%-21s' | format(vh_name) }}
{%         endfor %}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}
